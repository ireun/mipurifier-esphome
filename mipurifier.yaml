esphome:
  name: mipurifier
  comment: for Xiaomi Mi Air Purifier 3H (and similar models using the same protocol)
  includes:
    - mipurifier.h

# Required configuration for the weird single core ESP-WROOM-32D module
esp32:
  board: esp32doit-devkit-v1
  framework:
    type: esp-idf
    sdkconfig_options:
      CONFIG_FREERTOS_UNICORE: y
    advanced:
      ignore_efuse_mac_crc: true

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: ""

# Enable OTA updates
ota:
  password: ""

# Wi-Fi configuration
# EDIT CREDENTIALS OR PROVIDE YOUR OWN secrets.yaml
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Mipurifier Fallback Hotspot"
    password: "PyCfsbmzuMbj"

# Initialize the serial connection to the STM32 microcontroller
uart:
  id: uart_bus
  tx_pin: GPIO17
  rx_pin: GPIO16
  baud_rate: 115200

# Initialize our custom component
custom_component:
  - lambda: |-
      auto mipurifier = new MiPurifier(id(uart_bus));
      App.register_component(mipurifier);
      return {mipurifier};
    components:
      - id: mipurifier

# Main component for controlling the purifier
fan:
  - platform: template
    name: "Power"
    id: XiaomiPurifierFan
    speed_count: 15
    preset_modes:
      - "auto"
      - "night"
      - "low"
      - "medium"
      - "high"
      - "manual"
    on_turn_on:
      - lambda: |-
          auto c = static_cast<MiPurifier *>(mipurifier);
          c->turn_on();
    on_turn_off:
      - lambda: |-
          auto c = static_cast<MiPurifier *>(mipurifier);
          c->turn_off();
    on_preset_set:
      - lambda: |-
          auto c = static_cast<MiPurifier *>(mipurifier);
          if (!id(XiaomiPurifierFan).state) {
            c->set_mode(x);
            c->turn_off();
          } else {
            c->set_mode(x);
          }
    on_speed_set:
      - lambda: |-
          auto c = static_cast<MiPurifier *>(mipurifier);
          c->set_manualspeed((int)x-1);

# Config settings
switch:
  - platform: template
    name: "Beeper"
    id: beeper_switch
    icon: mdi:volume-high
    entity_category: config
    turn_on_action:
      - lambda: |-
          auto c = static_cast<MiPurifier *>(mipurifier);
          c->enable_beeper();
    turn_off_action:
      - lambda: |-
          auto c = static_cast<MiPurifier *>(mipurifier);
          c->disable_beeper();
  - platform: template
    name: "Lock"
    id: lock_switch
    icon: mdi:lock
    entity_category: config
    turn_on_action:
      - lambda: |-
          auto c = static_cast<MiPurifier *>(mipurifier);
          c->lock();
    turn_off_action:
      - lambda: |-
          auto c = static_cast<MiPurifier *>(mipurifier);
          c->unlock();

# Select components for mode & brightness
select:
  - platform: template
    name: "Display Brightness"
    id: brightness_select
    icon: mdi:brightness-6
    entity_category: config
    options:
      - "off"
      - "low"
      - "high"
    set_action:
      - lambda: |-
          auto c = static_cast<MiPurifier *>(mipurifier);
          c->set_brightness(x);

# Expose measured environmental values, and remaining filter life
sensor:
  - platform: custom
    lambda: |-
      auto c = static_cast<MiPurifier *>(mipurifier);
      return {
        c->airquality_sensor,
        c->humidity_sensor,
        c->temperature_sensor,
        c->filterlife_sensor,
      };
    sensors:
      - name: "Air quality (PM2.5)"
        unit_of_measurement: "µg/m³"
        device_class: pm25
        state_class: "measurement"
      - name: "Humidity"
        unit_of_measurement: "%"
        device_class: humidity
        state_class: "measurement"
      - name: "Temperature"
        unit_of_measurement: "°C"
        device_class: temperature
        accuracy_decimals: 1
        state_class: "measurement"
      - name: "Filter remaining"
        unit_of_measurement: "%"
        icon: mdi:air-filter
